name: CI

on:
  pull_request:
    branches: [main, develop]
    paths-ignore:
      - '**.md'
      - 'docs/**'

jobs:
  validate:
    name: Validate Code & Schema
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Install Dependencies
        run: npm ci
        working-directory: ./src
        
      - name: Lint
        run: npm run lint
        working-directory: ./src
        
      - name: Type Check
        run: npm run typecheck
        working-directory: ./src
        
      - name: Unit Tests
        run: npm test
        working-directory: ./src

      - name: Setup Supabase CLI
        uses: supabase/setup-cli@v1
        with:
          version: latest
      
      - name: Validate Supabase SQL Migrations
        run: |
          for file in supabase/migrations/*.sql; do
            echo "Validating SQL syntax for $file"
            # Use the pg_format tool to validate SQL syntax
            cat $file | pg_format -c -
            if [ $? -ne 0 ]; then
              echo "Error in SQL file: $file"
              exit 1
            fi
          done
          echo "All SQL files passed validation"
          
  build:
    name: Build Verification
    runs-on: ubuntu-latest
    needs: validate
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Install Dependencies
        run: npm ci
        working-directory: ./src
        
      - name: Build
        run: npm run build
        working-directory: ./src
        
      - name: Archive build
        uses: actions/upload-artifact@v3
        with:
          name: build
          path: src/build
          
  accessibility:
    name: Accessibility Checks
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          
      - name: Download build
        uses: actions/download-artifact@v3
        with:
          name: build
          path: build
          
      - name: Install pa11y
        run: npm install -g pa11y-ci
        
      - name: Run a11y tests
        run: |
          # Start a local server to serve the built files
          npx serve -s build &
          # Wait for the server to start
          sleep 5
          # Run pa11y against the local server
          pa11y-ci http://localhost:3000
        
  test-supabase-migrations:
    name: Test Supabase Migrations
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: postgres
        ports:
          - 5432:5432
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
          
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Supabase CLI
        uses: supabase/setup-cli@v1
        with:
          version: latest
          
      - name: Create test config
        run: |
          cat > supabase/config-test.toml << EOF
          # Testing configuration for Supabase
          project_id = "test-project"
          
          [api]
          port = 54321
          
          [db]
          port = 5432
          host = "localhost"
          user = "postgres"
          password = "postgres"
          database = "postgres"
          EOF
          
      - name: Apply migrations to test database
        run: |
          echo "Applying migrations to test database"
          cd supabase
          supabase db reset --db-url postgresql://postgres:postgres@localhost:5432/postgres
          
          # Verify the migrations applied successfully by checking for tables
          PGPASSWORD=postgres psql -h localhost -p 5432 -U postgres -d postgres -c "\dt"
          
          # Run some basic validation queries
          echo "Verifying tables were created correctly"
          PGPASSWORD=postgres psql -h localhost -p 5432 -U postgres -d postgres -c "SELECT COUNT(*) FROM information_schema.tables WHERE table_schema = 'public';"
